import { jsxs as _jsxs, jsx as _jsx } from "react/jsx-runtime";
import { ConfigurableValueBaseEditor } from "./ConfigurableValueBaseEditor";
import { useCallback, useState, useEffect } from "react";
import { convertValue } from "./convertValues";
import { DropdownMenu, DropdownMenuTrigger, Button, Settings, DropdownMenuContent, DropdownMenuItem, Check, AiGenerate, Expand, TooltipProvider, Tooltip, TooltipTrigger, Info, TooltipContent, Dialog, DialogTrigger, DialogContent } from "../..";
function FieldContent({ config, value, onChange, handleDialogToggle, isExpanded, onTypeChange, nodeId, insId, }) {
    const shouldShowExpand = !isExpanded &&
        (value.type === "json" ||
            (value.type === "string" && config.type === "longtext"));
    const typeOptions = [
        "dynamic",
        "number",
        "boolean",
        "json",
        "string",
    ];
    return (_jsxs("div", { className: "mb-1 font-medium flex items-center gap-2 justify-between", children: [_jsxs("div", { className: "flex items-center gap-2", children: [config.label, ":"] }), _jsxs("div", { className: "flex items-center gap-2", children: [config.typeConfigurable !== false && onTypeChange && (_jsxs("div", { className: "text-xs text-gray-500 flex items-center gap-1", children: [_jsx("span", { className: "capitalize", children: value.type }), _jsxs(DropdownMenu, { children: [_jsx(DropdownMenuTrigger, { asChild: true, children: _jsx(Button, { variant: "link", size: "xs", className: "h-4 p-0 text-xs", children: _jsx(Settings, { className: "h-4 w-4" }) }) }), _jsx(DropdownMenuContent, { align: "end", children: typeOptions.map((type) => (_jsx(DropdownMenuItem, { onClick: () => onTypeChange(type), children: _jsxs("div", { className: "flex items-center justify-between w-full", children: [_jsx("span", { className: "capitalize", children: type }), value.type === type && _jsx(Check, { className: "h-4 w-4 ml-2" })] }) }, type))) })] })] })), config.aiCompletion && (value.type === "json" || value.type === "string") && (_jsx("div", { children: _jsx(AiGenerate, { prompt: config.aiCompletion.prompt, placeholder: config.aiCompletion.placeholder, jsonMode: value.type === "json", currentValue: value.value, nodeId: nodeId, insId: insId, onComplete: (text) => {
                                try {
                                    const parsed = JSON.parse(text);
                                    onChange({
                                        ...value,
                                        value: parsed,
                                    });
                                }
                                catch {
                                    onChange({ ...value, value: text });
                                }
                            } }) })), shouldShowExpand && handleDialogToggle && (_jsx(Button, { variant: "outline", size: "xs", onClick: handleDialogToggle, children: _jsx(Expand, { size: 12 }) }))] })] }));
}
export function ConfigurableFieldEditor(props) {
    const { config, value, onChange, ports, nodeId, insId } = props;
    const [isDialogOpen, setIsDialogOpen] = useState(false);
    const [rawJsonData, setRawJsonData] = useState(value.type === "json" ? JSON.stringify(value.value, null, 2) : "");
    useEffect(() => {
        if (value.type === "json" && typeof value.value !== "string") {
            setRawJsonData(JSON.stringify(value.value, null, 2));
        }
    }, [value]);
    const changeType = useCallback((newType) => {
        const newValue = convertValue(value.type, newType, value.value);
        onChange({ type: newType, value: newValue });
    }, [value, onChange]);
    const handleDialogToggle = () => {
        setIsDialogOpen(!isDialogOpen);
    };
    const isTemplateSupported = ((value.type === "string" && config.type !== 'secret') || value.type === "json") &&
        config.templateSupport !== false;
    return (_jsxs("div", { className: "mb-4 group", children: [_jsx(FieldContent, { config: config, value: value, onChange: onChange, handleDialogToggle: handleDialogToggle, onTypeChange: changeType, nodeId: nodeId, insId: insId }), _jsx(ConfigurableValueBaseEditor, { value: value, onChange: onChange, fieldDefinition: config, isExpanded: false, rawJsonData: rawJsonData, onRawJsonDataChange: setRawJsonData, ports: ports }), _jsxs("div", { className: "mt-2 flex justify-between items-center", children: [config.description ? (_jsx("div", { className: "text-xs text-gray-500 dark:text-gray-400 italic", children: config.description })) : (_jsx("div", {})), isTemplateSupported && (_jsx(TooltipProvider, { delayDuration: 0, children: _jsxs(Tooltip, { children: [_jsx(TooltipTrigger, { asChild: true, children: _jsxs(Button, { variant: "ghost", size: "xs", className: "p-0 h-4 text-xs text-gray-500", children: ["Variables supported ", _jsx(Info, { className: "h-3 w-3 text-gray-500 ml-1" })] }) }), _jsx(TooltipContent, { className: "max-w-[300px]", children: "Use {{ }} to insert variables. For example {{myVar}} or {{myVar.someProp}}. Each distinct variable will be exposed as an input and can be used to receive dynamic values from other nodes." })] }) }))] }), _jsxs(Dialog, { open: isDialogOpen, onOpenChange: setIsDialogOpen, modal: false, children: [_jsx(DialogTrigger, { asChild: true, children: _jsx("button", { className: "hidden", children: "Open Dialog" }) }), _jsxs(DialogContent, { className: "max-w-screen-lg w-[90vw] !h-[90vh] !w-[90vw]", noCloseButton: true, noInteractOutside: true, children: [_jsx(FieldContent, { config: config, value: value, onChange: onChange, isExpanded: true, onTypeChange: isDialogOpen ? changeType : undefined, nodeId: nodeId, insId: insId }), _jsx(ConfigurableValueBaseEditor, { value: value, onChange: onChange, fieldDefinition: config, isExpanded: true, rawJsonData: rawJsonData, onRawJsonDataChange: setRawJsonData, ports: ports }), _jsxs("div", { className: "mt-2 flex justify-between items-center", children: [config.description ? (_jsx("div", { className: "text-xs text-gray-500 dark:text-gray-400 italic", children: config.description })) : (_jsx("div", {})), isTemplateSupported && (_jsx(TooltipProvider, { delayDuration: 0, children: _jsxs(Tooltip, { children: [_jsx(TooltipTrigger, { asChild: true, children: _jsxs(Button, { variant: "ghost", size: "xs", className: "p-0 h-4 text-xs text-gray-500", children: ["Variables supported ", _jsx(Info, { className: "h-3 w-3 text-gray-500 ml-1" })] }) }), _jsx(TooltipContent, { children: "Use {{ }} to insert variables. For example {{myVar}} or {{myVar.someProp}}" })] }) }))] }), _jsx("div", { className: "mt-6 flex justify-end", children: _jsx(Button, { onClick: () => setIsDialogOpen(false), children: "Close" }) })] })] })] }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uZmlndXJhYmxlRmllbGRFZGl0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvdWkvbm9kZS1jb25maWcvQ29uZmlndXJhYmxlRmllbGRFZGl0b3IvQ29uZmlndXJhYmxlRmllbGRFZGl0b3IudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFNQSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUM1RSxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDekQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFDTCxZQUFZLEVBQ1osbUJBQW1CLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxtQkFBbUIsRUFBRSxnQkFBZ0IsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUM5TSxNQUFNLE9BQU8sQ0FBQztBQUVmLFNBQVMsWUFBWSxDQUFDLEVBQ3BCLE1BQU0sRUFDTixLQUFLLEVBQ0wsUUFBUSxFQUNSLGtCQUFrQixFQUNsQixVQUFVLEVBQ1YsWUFBWSxFQUNaLE1BQU0sRUFDTixLQUFLLEdBVU47SUFDQyxNQUFNLGdCQUFnQixHQUNwQixDQUFDLFVBQVU7UUFDWCxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssTUFBTTtZQUNwQixDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssUUFBUSxJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQztJQUU3RCxNQUFNLFdBQVcsR0FBZ0M7UUFDL0MsU0FBUztRQUNULFFBQVE7UUFDUixTQUFTO1FBQ1QsTUFBTTtRQUNOLFFBQVE7S0FDVCxDQUFDO0lBRUYsT0FBTyxDQUNM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