import { debugLogger, enumToArray, DebuggerServerEventType } from "@flyde/core";
import { default as axios } from "axios";
import { io as _io } from "socket.io-client";
const debug = debugLogger("remote-debugger:editor-client");
export const createEditorClient = (url, executionId) => {
    const urlNodes = new URL(url);
    const socket = _io(urlNodes.origin, {
        path: `${urlNodes.pathname === "/" ? "" : urlNodes.pathname}/socket.io/editor`,
        timeout: 30000,
    });
    socket.emit("join-room-editor", executionId);
    return {
        emitChange: (data) => {
            socket.emit(DebuggerServerEventType.CHANGE_EVENT_NAME, data);
        },
        emitBreakpointsChange: (data) => {
            socket.emit(DebuggerServerEventType.UPDATE_BREAKPOINTS, data);
        },
        interceptInput: (data) => {
            socket.emit(DebuggerServerEventType.INPUT_VALUE_OVERRIDE, data);
        },
        interceptOutput: (data) => {
            socket.emit(DebuggerServerEventType.OUTPUT_VALUE_OVERRIDE, data);
        },
        onRuntimeReady: (cb) => {
            socket.on(DebuggerServerEventType.RUNTIME_READY, cb);
            return () => socket.off(DebuggerServerEventType.RUNTIME_READY, cb);
        },
        onChangeAwk: (cb) => {
            socket.on(DebuggerServerEventType.CHANGE_AWK, cb);
            return () => socket.off(DebuggerServerEventType.CHANGE_AWK, cb);
        },
        onChangeError: (cb) => {
            socket.on(DebuggerServerEventType.CHANGE_ERROR, cb);
            return () => socket.off(DebuggerServerEventType.CHANGE_ERROR, cb);
        },
        onIsAlive: (cb) => {
            socket.on(DebuggerServerEventType.IS_ALIVE, cb);
            return () => socket.off(DebuggerServerEventType.IS_ALIVE, cb);
        },
        emitInputValue: (pinId, value) => {
            debug(`Emitting push input value to ${pinId} %o`, value);
            socket.emit(DebuggerServerEventType.PUSH_INPUT_VALUE, { pinId, value });
        },
        destroy: () => {
            socket.disconnect();
            enumToArray(DebuggerServerEventType).forEach((type) => socket.off(type));
        },
        onDisconnect: (cb) => {
            socket.on("disconnect", cb);
            return () => socket.off("disconnect", cb);
        },
        debugInfo: () => {
            return `Remote debugger for ${url}`;
        },
        onBatchedEvents: (cb) => {
            socket.on(DebuggerServerEventType.EVENTS_BATCH, cb);
            return () => socket.off(DebuggerServerEventType.EVENTS_BATCH, cb);
        },
        requestState: () => {
            return axios.get(`${url}/state`).then((r) => r.data.state);
        },
        getHistory: (dto) => {
            return axios
                .get(`${url}/history`, {
                params: {
                    insId: dto.insId,
                    pinId: dto.pinId,
                    limit: dto.limit,
                    executionId,
                },
            })
                .then((r) => r.data);
        },
        clearHistory: () => {
            return axios.delete(`${url}/history`).then(() => { });
        },
        triggerNode: (nodeId, inputs) => {
            return axios
                .post(`${url}/trigger`, { nodeId, inputs })
                .then((r) => r.data);
        },
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdG9yLWNsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZWJ1Z2dlci9lZGl0b3ItY2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxXQUFXLEVBS1gsV0FBVyxFQUNYLHVCQUF1QixFQUV4QixNQUFNLGFBQWEsQ0FBQztBQUVyQixPQUFPLEVBQUUsT0FBTyxJQUFJLEtBQUssRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUV6QyxPQUFPLEVBQUUsRUFBRSxJQUFJLEdBQUcsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRTdDLE1BQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0FBOEMzRCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUNoQyxHQUFXLEVBQ1gsV0FBbUIsRUFDRyxFQUFFO0lBQ3hCLE1BQU0sUUFBUSxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRTlCLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO1FBQ2xDLElBQUksRUFBRSxHQUFHLFFBQVEsQ0FBQyxRQUFRLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUNqRCxtQkFBbUI7UUFDckIsT0FBTyxFQUFFLEtBQUs7S0FDZixDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBRTdDLE9BQU87UUFDTCxVQUFVLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxDQUFDO1FBQy9ELENBQUM7UUFDRCxxQkFBcUIsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFO1lBQzlCLE1BQU0sQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENB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