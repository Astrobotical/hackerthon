export const getLeafInstancesOfSelection = (selectedInstances, allInstances, allConnections) => {
    const allConnected = selectedInstances.reduce((acc, curr) => {
        const instancesConnectedToCurr = allConnections
            .filter((conn) => conn.to.insId === curr.id)
            .map((conn) => allInstances.find((ins) => ins.id === conn.from.insId))
            .filter((ins) => !!ins);
        return [...acc, ...instancesConnectedToCurr];
    }, []);
    // find all the instances who are only connected to our dragged piece, so we can assume the intent is to drag them too
    return allConnected.filter((ins) => {
        const insConnectedIds = allConnections.filter((conn) => conn.from.insId === ins.id || conn.to.insId === ins.id);
        return insConnectedIds.length === 1 && !selectedInstances.includes(ins); //only those who are singly connected
    });
};
export const calculateInstancesWithSingleConstPinsMap = (node, constSinglePinMap) => {
    const { connections } = node;
    return connections
        .filter((conn) => {
        return constSinglePinMap.has(conn.from.insId);
    })
        .reduce((accMap, conn) => {
        const constVal = constSinglePinMap.get(conn.from.insId);
        const targetInstance = conn.to.insId;
        const pinMap = accMap.get(targetInstance) || new Map();
        pinMap.set(conn.to.pinId, { val: constVal, insId: conn.from.insId });
        accMap.set(targetInstance, pinMap);
        return accMap;
    }, new Map());
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS1ncmFwaC11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy92aXN1YWwtbm9kZS1lZGl0b3Ivbm9kZS1ncmFwaC11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRyxDQUN6QyxpQkFBaUMsRUFDakMsWUFBNEIsRUFDNUIsY0FBZ0MsRUFDaEIsRUFBRTtJQUNsQixNQUFNLFlBQVksR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQWlCLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFO1FBQzFFLE1BQU0sd0JBQXdCLEdBQUcsY0FBYzthQUM1QyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxFQUFFLENBQUM7YUFDM0MsR0FBRyxDQUNGLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FDUCxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFpQixDQUN6RTthQUNBLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFCLE9BQU8sQ0FBQyxHQUFHLEdBQUcsRUFBRSxHQUFHLHdCQUF3QixDQUFDLENBQUM7SUFDL0MsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRVAsc0hBQXNIO0lBQ3RILE9BQU8sWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1FBQ2pDLE1BQU0sZUFBZSxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQzNDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxHQUFHLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQ2pFLENBQUM7UUFDRixPQUFPLGVBQWUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMscUNBQXFDO0lBQ2hILENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBT0YsTUFBTSxDQUFDLE1BQU0sd0NBQXdDLEdBQUcsQ0FDdEQsSUFBZ0IsRUFDaEIsaUJBQW1DLEVBQ1YsRUFBRTtJQUMzQixNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsSUFBSSxDQUFDO0lBRTdCLE9BQU8sV0FBVztTQUNmLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ2YsT0FBTyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoRCxDQUFDLENBQUM7U0FDRCxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFDdkIsTUFBTSxRQUFRLEdBQUcsaUJBQWlCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDeEQsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUM7UUFDckMsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ3ZELE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDckUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDbkMsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQyxFQUFFLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQztBQUNsQixDQUFDLENBQUMifQ==