import { nodeInput, nodeOutput } from "@flyde/core";
export const emptyWebUiProject = {
    id: "new-web-ui-project",
    inputs: {},
    outputs: {
        jsx: nodeOutput(),
    },
    inputsPosition: { mouse: { x: 0, y: 0 }, keyPress: { x: 200, y: 0 } },
    outputsPosition: { response: { x: 0, y: 400 } },
    connections: [],
    instances: [],
    completionOutputs: [],
    reactiveInputs: [],
};
export const emptyServerProject = {
    id: "new-server-project",
    inputs: {
        request: nodeInput(),
    },
    outputs: {
        response: nodeOutput(),
    },
    inputsPosition: { request: { x: 0, y: 0 } },
    outputsPosition: { response: { x: 0, y: 400 } },
    connections: [],
    instances: [],
};
export const emptyLambdaProject = {
    id: "new-lambda-project",
    inputs: {
        context: nodeInput(),
    },
    outputs: {
        response: nodeOutput(),
    },
    inputsPosition: { context: { x: 0, y: 0 } },
    outputsPosition: { response: { x: 0, y: 400 } },
    connections: [],
    instances: [],
};
export const emptyMobileProject = {
    id: "new-mobile-project",
    inputs: {},
    outputs: {
        jsx: nodeOutput(),
    },
    inputsPosition: { context: { x: 0, y: 0 } },
    outputsPosition: { response: { x: 0, y: 400 } },
    connections: [],
    instances: [],
};
export const emptyCliProject = {
    id: "new-cli-project",
    inputs: {
        args: nodeInput(),
    },
    outputs: {
        stdout: nodeOutput(true),
        stderr: nodeOutput(true),
        exit: nodeOutput(true),
    },
    inputsPosition: { args: { x: 0, y: 0 } },
    outputsPosition: {
        stdout: { x: -100, y: 400 },
        stderr: { x: 0, y: 400 },
        exit: { x: 100, y: 400 },
    },
    connections: [],
    instances: [],
};
export const typeProjectMap = {
    server: emptyServerProject,
    "web-ui": emptyWebUiProject,
    lambda: emptyLambdaProject,
    mobile: emptyMobileProject,
    cli: emptyCliProject,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvamVjdC10eXBlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvcHJvamVjdC10eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBYyxNQUFNLGFBQWEsQ0FBQztBQUVoRSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBZTtJQUMzQyxFQUFFLEVBQUUsb0JBQW9CO0lBQ3hCLE1BQU0sRUFBRSxFQUFFO0lBQ1YsT0FBTyxFQUFFO1FBQ1AsR0FBRyxFQUFFLFVBQVUsRUFBRTtLQUNsQjtJQUNELGNBQWMsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3JFLGVBQWUsRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFO0lBQy9DLFdBQVcsRUFBRSxFQUFFO0lBQ2YsU0FBUyxFQUFFLEVBQUU7SUFDYixpQkFBaUIsRUFBRSxFQUFFO0lBQ3JCLGNBQWMsRUFBRSxFQUFFO0NBQ25CLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBZTtJQUM1QyxFQUFFLEVBQUUsb0JBQW9CO0lBQ3hCLE1BQU0sRUFBRTtRQUNOLE9BQU8sRUFBRSxTQUFTLEVBQUU7S0FDckI7SUFDRCxPQUFPLEVBQUU7UUFDUCxRQUFRLEVBQUUsVUFBVSxFQUFFO0tBQ3ZCO0lBQ0QsY0FBYyxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDM0MsZUFBZSxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUU7SUFDL0MsV0FBVyxFQUFFLEVBQUU7SUFDZixTQUFTLEVBQUUsRUFBRTtDQUNkLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBZTtJQUM1QyxFQUFFLEVBQUUsb0JBQW9CO0lBQ3hCLE1BQU0sRUFBRTtRQUNOLE9BQU8sRUFBRSxTQUFTLEVBQUU7S0FDckI7SUFDRCxPQUFPLEVBQUU7UUFDUCxRQUFRLEVBQUUsVUFBVSxFQUFFO0tBQ3ZCO0lBQ0QsY0FBYyxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDM0MsZUFBZSxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUU7SUFDL0MsV0FBVyxFQUFFLEVBQUU7SUFDZixTQUFTLEVBQUUsRUFBRTtDQUNkLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBZTtJQUM1QyxFQUFFLEVBQUUsb0JBQW9CO0lBQ3hCLE1BQU0sRUFBRSxFQUFFO0lBQ1YsT0FBTyxFQUFFO1FBQ1AsR0FBRyxFQUFFLFVBQVUsRUFBRTtLQUNsQjtJQUNELGNBQWMsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQzNDLGVBQWUsRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFO0lBQy9DLFdBQVcsRUFBRSxFQUFFO0lBQ2YsU0FBUyxFQUFFLEVBQUU7Q0FDZCxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFlO0lBQ3pDLEVBQUUsRUFBRSxpQkFBaUI7SUFDckIsTUFBTSxFQUFFO1FBQ04sSUFBSSxFQUFFLFNBQVMsRUFBRTtLQUNsQjtJQUNELE9BQU8sRUFBRTtRQUNQLE1BQU0sRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDO1FBQ3hCLElBQUksRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDO0tBQ3ZCO0lBQ0QsY0FBYyxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDeEMsZUFBZSxFQUFFO1FBQ2YsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUU7UUFDM0IsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFO1FBQ3hCLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRTtLQUN6QjtJQUNELFdBQVcsRUFBRSxFQUFFO0lBQ2YsU0FBUyxFQUFFLEVBQUU7Q0FDZCxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFnQztJQUN6RCxNQUFNLEVBQUUsa0JBQWtCO0lBQzFCLFFBQVEsRUFBRSxpQkFBaUI7SUFDM0IsTUFBTSxFQUFFLGtCQUFrQjtJQUMxQixNQUFNLEVBQUUsa0JBQWtCO0lBQzFCLEdBQUcsRUFBRSxlQUFlO0NBQ3JCLENBQUMifQ==