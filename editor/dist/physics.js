"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.totalEnergy = exports.itrPhysics = exports.hookes = exports.coulombs = exports.vToStr = exports.vNorm = exports.vLen = exports.vSub = exports.vAdd = exports.vDiv = exports.vMul = exports.vZero = exports.rnd = exports.vec = exports.size = void 0;
const size = (w, h) => ({ width: w, height: h });
exports.size = size;
const vec = (x, y) => ({ x, y });
exports.vec = vec;
const rnd = (top = 100, min = 0) => Math.floor(Math.random() * (top - min)) + min;
exports.rnd = rnd;
exports.vZero = { x: 0, y: 0 };
const vMul = ({ x, y }, s) => ({
    x: x * s,
    y: y * s,
});
exports.vMul = vMul;
const vDiv = ({ x, y }, s) => (0, exports.vMul)({ x, y }, 1 / s);
exports.vDiv = vDiv;
const vAdd = (a, b) => ({ x: a.x + b.x, y: a.y + b.y });
exports.vAdd = vAdd;
const vSub = (a, b) => (0, exports.vAdd)(a, (0, exports.vMul)(b, -1));
exports.vSub = vSub;
const vLen = ({ x, y }) => Math.sqrt(x * x + y * y);
exports.vLen = vLen;
const vNorm = (a) => (0, exports.vDiv)(a, (0, exports.vLen)(a) || 1);
exports.vNorm = vNorm;
const vToStr = ({ x, y }) => `${x.toFixed(1)},${y.toFixed(1)}`;
exports.vToStr = vToStr;
const coulombs = (e1, e2, rep) => {
    const distance = (0, exports.vLen)((0, exports.vSub)(e1.p, e2.p));
    if (distance === 0) {
        const dirVector = (0, exports.vec)(-1 + Math.random() * 2, -1 + Math.random() * 2); // some vector
        const fs = (e1.m * e2.m) / Math.pow(10, 2);
        return (0, exports.vMul)(dirVector, fs * rep);
    }
    else {
        const dirVector = (0, exports.vNorm)((0, exports.vSub)(e2.p, e1.p));
        const fs = (e1.m * e2.m) / Math.pow(distance + 0.1, 2);
        return (0, exports.vMul)(dirVector, fs * rep);
    }
};
exports.coulombs = coulombs;
const hookes = (e1, e2, minLength, maxLength, rep) => {
    const distance = (0, exports.vLen)((0, exports.vSub)(e1.p, e2.p));
    const dirVector = (0, exports.vNorm)((0, exports.vSub)(e1.p, e2.p));
    // the direction of the spring
    let displacement = 0;
    if (distance < minLength) {
        displacement = minLength - distance;
    }
    else if (distance > maxLength) {
        displacement = maxLength - distance;
    }
    return (0, exports.vMul)(dirVector, rep * displacement);
    // var direction = d.normalise();
    // apply force to each end point
};
exports.hookes = hookes;
const itrPhysics = (dt, e) => {
    const { p, v, f, m } = e;
    const a = (0, exports.vDiv)(f, m);
    const mod = dt / 1000;
    const newV = (0, exports.vAdd)((0, exports.vMul)(a, mod), v);
    const newP = (0, exports.vAdd)((0, exports.vMul)(newV, mod), p);
    return { ...e, p: newP, v: newV, f: (0, exports.vec)(0, 0) };
};
exports.itrPhysics = itrPhysics;
const totalEnergy = (ents) => {
    return ents.reduce((prev, curr) => {
        const s = (0, exports.vLen)(curr.v);
        return prev + 0.5 * curr.m * s * s;
    }, 0);
};
exports.totalEnergy = totalEnergy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGh5c2ljcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9waHlzaWNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQU9PLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFBakUsUUFBQSxJQUFJLFFBQTZEO0FBRXZFLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQTNDLFFBQUEsR0FBRyxPQUF3QztBQVlqRCxNQUFNLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQ3hDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBRG5DLFFBQUEsR0FBRyxPQUNnQztBQUVuQyxRQUFBLEtBQUssR0FBVyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0FBRXJDLE1BQU0sSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFVLEVBQUUsQ0FBUyxFQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQzVELENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQztJQUNSLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQztDQUNULENBQUMsQ0FBQztBQUhVLFFBQUEsSUFBSSxRQUdkO0FBQ0ksTUFBTSxJQUFJLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQVUsRUFBRSxDQUFTLEVBQVUsRUFBRSxDQUMxRCxJQUFBLFlBQUksRUFBQyxFQUFFLENBQUMs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